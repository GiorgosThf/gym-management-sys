CREATE TABLE IF NOT EXISTS public.activities
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    message   varchar(255),
    metadata  jsonb,
    timestamp timestamp(6) with time zone,
    type      varchar(255)
        constraint activities_type_check
            check ((type)::text = ANY
                   (ARRAY [('USER_REGISTERED'::character varying)::text, ('USER_UPDATED'::character varying)::text, ('USER_DELETED'::character varying)::text, ('BOOKING_MADE'::character varying)::text, ('BOOKING_CANCELLED'::character varying)::text, ('PROGRAM_ADDED'::character varying)::text, ('PROGRAM_UPDATED'::character varying)::text, ('PROGRAM_DELETED'::character varying)::text, ('ANNOUNCEMENT_UPDATED'::character varying)::text, ('ANNOUNCEMENT_DELETED'::character varying)::text, ('ANNOUNCEMENT_POSTED'::character varying)::text]))
);

ALTER TABLE public.activities
    OWNER TO gymuser;

CREATE TABLE IF NOT EXISTS public.announcements
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    content    varchar(255),
    created_at timestamp(6),
    title      varchar(255),
    type       varchar(255)
        constraint announcements_type_check
            check ((type)::text = ANY ((ARRAY ['OFFER'::character varying, 'NEWS'::character varying])::text[]))
);

ALTER TABLE public.announcements
    owner to gymuser;


CREATE TABLE IF NOT EXISTS public.programs
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    description  varchar(255),
    enabled      boolean,
    max_capacity integer,
    name         varchar(255),
    type         varchar(255)
        constraint programs_type_check
            check ((type)::text = ANY ((ARRAY ['GROUP'::character varying, 'INDIVIDUAL'::character varying])::text[]))
);

ALTER TABLE public.programs
    owner to gymuser;



CREATE TABLE IF NOT EXISTS public.registration_requests
(
    id                  BIGINT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    address             varchar(255) not null,
    city                varchar(255) not null,
    country             varchar(255) not null,
    email               varchar(255) not null
        constraint ukcpvtv02wv5efi4ugad0va9gdn
            unique,
    first_name          varchar(255) not null,
    last_name           varchar(255) not null,
    password            varchar(255) not null,
    registration_status varchar(255)
        constraint registration_requests_registration_status_check
            check ((registration_status)::text = ANY
                   ((ARRAY ['PENDING'::character varying, 'REJECTED'::character varying, 'ACCEPTED'::character varying])::text[]))
);

ALTER TABLE public.registration_requests
    owner to gymuser;


CREATE TABLE IF NOT EXISTS public.trainers
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    bio            varchar(255),
    email          varchar(255) not null
        constraint ukp760ma5h90yjnu0s0c94jawyb
            unique,
    enabled        boolean,
    first_name     varchar(255),
    last_name      varchar(255),
    specialization varchar(255)
);

ALTER TABLE public.trainers
    owner to gymuser;

CREATE TABLE IF NOT EXISTS public.sessions
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY
        constraint schedules_pkey
            primary key,
    current_bookings integer,
    date             date,
    end_time         time(6),
    max_capacity     integer,
    start_time       time(6),
    program_id       bigint not null
        constraint fk5fsg04vrd2c7lsd3vp8f4c4qk
            references public.programs,
    trainer_id       bigint not null
        constraint fk8k8sargvsxu3pbed0a0q0bspi
            references public.trainers
);

ALTER TABLE public.sessions
    owner to gymuser;

CREATE TABLE IF NOT EXISTS public.users
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    address    varchar(255) not null,
    city       varchar(255) not null,
    country    varchar(255) not null,
    email      varchar(255) not null
        constraint uk6dotkott2kjsp8vw4d0m25fb7
            unique,
    enabled    boolean      not null,
    first_name varchar(255) not null,
    last_name  varchar(255) not null,
    password   varchar(255) not null,
    role       varchar(255) not null
        constraint users_role_check
            check ((role)::text = ANY
                   ((ARRAY ['ROLE_ADMIN'::character varying, 'ROLE_USER'::character varying])::text[]))
);

ALTER TABLE public.users
    owner to gymuser;

CREATE TABLE IF NOT EXISTS public.bookings
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    cancelled  boolean not null,
    created_at timestamp(6),
    session_id bigint  not null
        constraint fker0lq2qsui5vv3qn0i6sm1rom
            references public.sessions,
    user_id    bigint  not null
        constraint fkeyog2oic85xg7hsu2je2lx3s6
            references public.users
);

ALTER TABLE public.bookings
    OWNER TO gymuser;


CREATE OR REPLACE FUNCTION public.create_booking(p_user_id bigint, p_session_id bigint, p_current_time timestamp without time zone) returns bookings
    language plpgsql
as
$$
DECLARE
    v_start_of_week DATE;
    v_end_of_week DATE;
    v_cancellations_this_week INTEGER;
    v_current_bookings INTEGER;
    v_max_capacity INTEGER;
    v_new_booking bookings%ROWTYPE;
BEGIN
    -- Calculate the start and end of the current week
    SELECT date_trunc('week', p_current_time)::date INTO v_start_of_week;
    SELECT v_start_of_week + INTERVAL '6 days' INTO v_end_of_week;

    -- Check if user has already made 2 cancellations this week
    SELECT COUNT(*) INTO v_cancellations_this_week
    FROM bookings
    WHERE user_id = p_user_id
      AND cancelled = TRUE
      AND created_at >= v_start_of_week
      AND created_at <= v_end_of_week + INTERVAL '1 day';

    IF v_cancellations_this_week >= 2 THEN
        RAISE EXCEPTION 'Cannot create booking: More than 2 cancellations this week.';
    END IF;

    -- Check current bookings and max capacity for the schedule
    SELECT current_bookings, max_capacity INTO v_current_bookings, v_max_capacity
    FROM sessions
    WHERE id = p_session_id;

    IF v_current_bookings >= v_max_capacity THEN
        RAISE EXCEPTION 'Cannot create booking: Schedule is at full capacity.';
    END IF;

    -- Create the booking
    INSERT INTO bookings (user_id, session_id, created_at, cancelled)
    VALUES (p_user_id, p_session_id, p_current_time, FALSE)
    RETURNING * INTO v_new_booking;

    -- Update the schedule's current bookings count
    UPDATE sessions SET current_bookings = current_bookings + 1
    WHERE id = p_session_id;

    -- Return the newly created booking details
    RETURN v_new_booking;
END;
$$;

alter function public.create_booking(bigint, bigint, timestamp) owner to gymuser;


CREATE OR REPLACE PROCEDURE public.cancel_booking(IN p_booking_id bigint, IN p_user_id bigint, IN p_current_time timestamp without time zone)
    language plpgsql
as
$$
DECLARE
    v_session_time TIMESTAMP;
    v_start_of_week DATE;
    v_end_of_week DATE;
    v_cancellations_this_week INTEGER;
BEGIN
    -- Fetch the start time of the booking to check if cancellation is within allowed time frame
    SELECT s.date + s.start_time INTO v_session_time
    FROM sessions s
             JOIN bookings b ON b.session_id = s.id
    WHERE b.id = p_booking_id;

    -- Calculate the start and end of the current week
    SELECT date_trunc('week', p_current_time)::date INTO v_start_of_week;
    SELECT v_start_of_week + INTERVAL '6 days' INTO v_end_of_week;

    -- Check if cancellation is allowed (must be at least 2 hours before the scheduled start time)
    IF p_current_time > v_session_time - INTERVAL '2 hours' THEN
        RAISE EXCEPTION 'Cancellation not allowed less than 2 hours before the start time.';
    END IF;

    -- Check if user has already made 2 cancellations this week
    SELECT COUNT(*) INTO v_cancellations_this_week
    FROM bookings
    WHERE user_id = p_user_id
      AND cancelled = TRUE
      AND created_at >= v_start_of_week
      AND created_at <= v_end_of_week;

    IF v_cancellations_this_week >= 2 THEN
        RAISE EXCEPTION 'You cannot cancel more than 2 bookings in a week.';
    ELSE
        -- Update the booking to set it as cancelled
        UPDATE bookings SET cancelled = TRUE WHERE id = p_booking_id;

        -- Optional: Update the schedule's current bookings count
        UPDATE sessions SET current_bookings = current_bookings - 1
        WHERE id = (SELECT session_id FROM bookings WHERE id = p_booking_id);
    END IF;
END;
$$;

ALTER PROCEDURE public.cancel_booking(bigint, bigint, timestamp) owner to gymuser;

CREATE OR REPLACE FUNCTION public.log_booking_activity() returns trigger
    language plpgsql
as
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('BOOKING_MADE', 'A booking was made', json_build_object('userId', NEW.user_id, 'sessionId', NEW.session_id), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('BOOKING_CANCELLED', 'A booking was cancelled', json_build_object('userId', NEW.user_id, 'sessionId', NEW.session_id), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('BOOKING_DELETED', 'A booking was deleted', json_build_object('userId', OLD.user_id, 'sessionId', OLD.session_id), CURRENT_TIMESTAMP);
    END IF;
    RETURN NEW;
END;
$$;

ALTER FUNCTION public.log_booking_activity() owner to gymuser;

CREATE OR REPLACE FUNCTION public.log_program_activity() returns trigger
    language plpgsql
as
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('PROGRAM_ADDED', 'A new program was added', json_build_object('programId', NEW.id, 'programName', NEW.name), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('PROGRAM_UPDATED', 'A program was updated', json_build_object('programId', NEW.id, 'programName', NEW.name), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('PROGRAM_DELETED', 'A program was deleted', json_build_object('programId', NEW.id, 'programName', NEW.name), CURRENT_TIMESTAMP);
    END IF;
    RETURN NEW;
END;
$$;

ALTER FUNCTION public.log_program_activity() owner to gymuser;

CREATE OR REPLACE FUNCTION public.log_announcement_activity() returns trigger
    language plpgsql
as
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('ANNOUNCEMENT_POSTED', 'A new announcement was posted', json_build_object('announcementId', NEW.id), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('ANNOUNCEMENT_UPDATED', 'An announcement was updated', json_build_object('announcementId', NEW.id), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('ANNOUNCEMENT_DELETED', 'An announcement was deleted', json_build_object('announcementId', NEW.id), CURRENT_TIMESTAMP);
    END IF;
    RETURN NEW;
END;
$$;

alter function public.log_announcement_activity() owner to gymuser;

CREATE OR REPLACE FUNCTION public.log_registration_activity() returns trigger
    language plpgsql
as
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('USER_REGISTERED', 'A new user registered', json_build_object('userId', NEW.id, 'userName', NEW.email), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('USER_UPDATED', 'A user updated', json_build_object('userId', NEW.id, 'userName', NEW.email), CURRENT_TIMESTAMP);
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO activities (type, message, metadata, timestamp)
        VALUES ('USER_DELETED', 'A user deleted', json_build_object('userId', NEW.id, 'userName', NEW.email), CURRENT_TIMESTAMP);
    END IF;
    RETURN NEW;
END;
$$;

alter function public.log_registration_activity() owner to gymuser;


create trigger trigger_log_booking_activity_insert
    after insert
    on public.bookings
    for each row
execute procedure public.log_booking_activity();

create trigger trigger_log_booking_activity_update
    after update
    on public.bookings
    for each row
execute procedure public.log_booking_activity();

create trigger trigger_log_booking_activity_delete
    after delete
    on public.bookings
    for each row
execute procedure public.log_booking_activity();

create trigger trigger_log_registration_activity_insert
    after insert
    on public.users
    for each row
execute procedure public.log_registration_activity();

create trigger trigger_log_registration_activity_update
    after update
    on public.users
    for each row
execute procedure public.log_registration_activity();

create trigger trigger_log_registration_activity_delete
    after delete
    on public.users
    for each row
execute procedure public.log_registration_activity();

create trigger trigger_log_program_activity_insert
    after insert
    on public.programs
    for each row
execute procedure public.log_program_activity();

create trigger trigger_log_program_activity_update
    after update
    on public.programs
    for each row
execute procedure public.log_program_activity();

create trigger trigger_log_program_activity_delete
    after delete
    on public.programs
    for each row
execute procedure public.log_program_activity();


create trigger trigger_log_announcement_activity_insert
    after insert
    on public.announcements
    for each row
execute procedure public.log_announcement_activity();

create trigger trigger_log_announcement_activity_update
    after update
    on public.announcements
    for each row
execute procedure public.log_announcement_activity();

create trigger trigger_log_announcement_activity_delete
    after delete
    on public.announcements
    for each row
execute procedure public.log_announcement_activity();


-- Insert Initial Users
INSERT INTO users (first_name, last_name, email, password, country, city, address, role, enabled)
VALUES
    ('Admin', 'User', 'admin@example.com', '$2a$10$F1R.TquvMVcF5l.kABT2quzOXVMvoPaZF2vWHouz.XmnC7FYgyrZi', 'United States', 'New York', '123 Admin St', 'ROLE_ADMIN', true),
    ('Regular', 'User', 'user@example.com', '$2a$10$z.5ZzRyjmuULNoyofJMI1OL4LMPF9YwhxYoEdx5XsQrCbzu9PNi92', 'United States', 'San Francisco', '456 User Rd', 'ROLE_USER', true);

-- Insert Sample Programs
INSERT INTO programs (name, description, max_capacity, type, enabled)
VALUES
    ('Yoga', 'Morning Session Beginners Friendly', 20, 'GROUP', true),
    ('Pilates', 'Afternoon High Energy', 15, 'INDIVIDUAL', true),
    ('Strength Training', 'Advanced Level Strength & Cardio', 25, 'GROUP', true),
    ('Cardio', 'Morning Session for Weight Loss', 30, 'GROUP', true),
    ('Crossfit', 'Evening High Intensity', 20, 'INDIVIDUAL', true);

-- Insert Sample Trainers
INSERT INTO trainers (first_name, last_name, email, specialization, bio, enabled)
VALUES
    ('John', 'Doe', 'johndoe@gmail.com', 'Yoga', 'Certified Yoga Instructor with 5 years of experience.', true),
    ('Jane', 'Smith', 'smith@gmail.com', 'Pilates', 'Expert in Pilates and functional training.', true),
    ('Mike', 'Brown', 'brown@gmail.com', 'Strength', 'Personal Trainer specializing in weightlifting.', true),
    ('Laura', 'Johnson', 'john@gmail.com', 'Cardio', 'Cardio fitness coach with 7 years of experience.', true),
    ('Robert', 'Williams', 'garcia@gmail.com', 'Crossfit', 'Crossfit level 2 coach.', true);

-- Insert Sample Sessions
INSERT INTO sessions (program_id, trainer_id, date, start_time, end_time, current_bookings, max_capacity)
VALUES
    (1, 1, CURRENT_DATE + INTERVAL '3 days', '08:00:00', '09:00:00', 5, 20),
    (2, 2, CURRENT_DATE + INTERVAL '5 days', '14:00:00', '15:00:00', 8, 15),
    (3, 3, CURRENT_DATE + INTERVAL '7 days', '17:00:00', '18:00:00', 10, 25),
    (4, 4, CURRENT_DATE + INTERVAL '10 days', '10:00:00', '11:00:00', 12, 30),
    (5, 5, CURRENT_DATE + INTERVAL '12 days', '19:00:00', '20:00:00', 15, 20);

-- Insert Sample Announcements
INSERT INTO announcements (title, content, type, created_at)
VALUES
    ('New Yoga Class!', 'Join our new Yoga classes every morning at 9 AM!', 'NEWS', NOW()),
    ('Crossfit Challenge', 'Participate in our new Crossfit competition!', 'NEWS', NOW()),
    ('Schedule Update', 'Strength Training session price has been updated.', 'OFFER', NOW());

-- Insert Sample Bookings
INSERT INTO bookings (user_id, session_id, cancelled, created_at)
VALUES
    (2, 1, false, NOW()),
    (2, 2, false, NOW());


-- Insert Sample Registration Requests
INSERT INTO registration_requests (address, city, country, email, first_name, last_name, password, registration_status)
VALUES
    ('789 Pending St', 'Miami', 'United States', 'pendinguser@example.com', 'Pending', 'User', '$2a$10$z.5ZzRyjmuULNoyofJMI1OL4LMPF9YwhxYoEdx5XsQrCbzu9PNi92', 'PENDING'),
    ('1010 Rejected Rd', 'Los Angeles', 'United States', 'rejected@example.com', 'Rejected', 'User', '$2a$10$z.5ZzRyjmuULNoyofJMI1OL4LMPF9YwhxYoEdx5XsQrCbzu9PNi92', 'REJECTED');

